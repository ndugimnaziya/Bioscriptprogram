#!/usr/bin/env python3
"""
BioScript - Pasiyent Tarix√ß…ôsi v…ô AI K√∂m…ôk√ßisi
Ke√ßmi≈ü reseptl…ôrin AI il…ô t…ôhlili v…ô yeni resept yazma
"""

from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                            QPushButton, QFrame, QListWidget, QListWidgetItem,
                            QTextEdit, QLineEdit, QFormLayout, QDateEdit,
                            QComboBox, QMessageBox, QGroupBox, QScrollArea,
                            QSplitter, QTabWidget, QTableWidget, QTableWidgetItem,
                            QSpinBox, QPlainTextEdit)
from PyQt5.QtCore import Qt, pyqtSignal, QDate, QThread, QTimer
from PyQt5.QtGui import QFont
from datetime import datetime, date
import json

from gemini_ai import BioScriptAI

class PatientHistoryAIWidget(QWidget):
    """Pasiyent tarix√ß…ôsi v…ô AI k√∂m…ôk√ßili resept yazma"""
    
    prescription_completed = pyqtSignal()  # Resept tamamlandƒ±
    
    def __init__(self, db_manager, patient_data, doctor_id):
        super().__init__()
        self.db_manager = db_manager
        self.patient_data = patient_data
        self.doctor_id = doctor_id
        self.ai_assistant = BioScriptAI()
        self.patient_history = []
        
        self.init_ui()
        self.load_patient_history()
        
    def init_ui(self):
        """UI yaratma"""
        layout = QVBoxLayout(self)
        layout.setSpacing(20)
        layout.setContentsMargins(20, 20, 20, 20)
        
        # Pasiyent m…ôlumatlarƒ± ba≈ülƒ±ƒüƒ±
        patient_info = QLabel(f"üë§ {self.patient_data['ad']} {self.patient_data['soyad']} - Ya≈ü: {self.patient_data['ya≈ü']}")
        patient_info.setFont(QFont("Segoe UI", 18, QFont.Bold))
        patient_info.setAlignment(Qt.AlignCenter)
        patient_info.setStyleSheet("""
            color: #1565c0; 
            margin-bottom: 15px;
            padding: 15px;
            background: #e3f2fd;
            border-radius: 15px;
        """)
        layout.addWidget(patient_info)
        
        # Ana splitter
        main_splitter = QSplitter(Qt.Horizontal)
        
        # Sol t…ôr…ôf - Ke√ßmi≈ü reseptl…ôr
        history_frame = QGroupBox("üìã Ke√ßmi≈ü Reseptl…ôr")
        history_frame.setFont(QFont("Segoe UI", 14, QFont.Bold))
        history_frame.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #e3f2fd;
                border-radius: 10px;
                margin: 10px;
                padding: 15px;
                background: white;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 15px;
                padding: 0 10px;
                color: #1565c0;
                background: white;
            }
        """)
        
        history_layout = QVBoxLayout(history_frame)
        
        # Ke√ßmi≈ü reseptl…ôr listi
        self.history_list = QListWidget()
        self.history_list.setStyleSheet("""
            QListWidget {
                border: 1px solid #e0e0e0;
                border-radius: 8px;
                background: #fafafa;
                padding: 8px;
                font-family: 'Segoe UI';
                font-size: 12px;
            }
            QListWidget::item {
                padding: 12px;
                border-bottom: 1px solid #e0e0e0;
                border-radius: 4px;
                margin: 2px 0;
                background: white;
            }
            QListWidget::item:hover {
                background: #f0f8ff;
            }
            QListWidget::item:selected {
                background: #e3f2fd;
                color: #1565c0;
            }
        """)
        
        history_layout.addWidget(self.history_list)
        
        # AI t…ôhlil d√ºym…ôsi
        self.ai_analyze_btn = QPushButton("ü§ñ AI T…ôhlil Et")
        self.ai_analyze_btn.setFont(QFont("Segoe UI", 12, QFont.Bold))
        self.ai_analyze_btn.setFixedHeight(40)
        self.ai_analyze_btn.clicked.connect(self.analyze_with_ai)
        self.ai_analyze_btn.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                          stop:0 #ff9800, stop:1 #f57c00);
                color: white;
                border: none;
                border-radius: 8px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                          stop:0 #ffb74d, stop:1 #ff9800);
            }
        """)
        history_layout.addWidget(self.ai_analyze_btn)
        
        main_splitter.addWidget(history_frame)
        
        # Saƒü t…ôr…ôf - Yeni resept yazma
        prescription_frame = QGroupBox("üìù Yeni Resept")
        prescription_frame.setFont(QFont("Segoe UI", 14, QFont.Bold))
        prescription_frame.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #e3f2fd;
                border-radius: 10px;
                margin: 10px;
                padding: 15px;
                background: white;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 15px;
                padding: 0 10px;
                color: #1565c0;
                background: white;
            }
        """)
        
        prescription_layout = QVBoxLayout(prescription_frame)
        
        # AI t√∂vsiy…ôl…ôri sah…ôsi
        self.ai_recommendations = QTextEdit()
        self.ai_recommendations.setPlaceholderText("AI t…ôhlil edildikd…ôn sonra t√∂vsiy…ôl…ôr burada g√∂r√ºn…ôc…ôk...")
        self.ai_recommendations.setMaximumHeight(150)
        self.ai_recommendations.setStyleSheet("""
            QTextEdit {
                border: 2px solid #e0e0e0;
                border-radius: 8px;
                padding: 10px;
                background: #f8f9fa;
                font-family: 'Segoe UI';
                font-size: 12px;
            }
        """)
        self.ai_recommendations.setReadOnly(True)
        prescription_layout.addWidget(QLabel("ü§ñ AI T√∂vsiy…ôl…ôri:"))
        prescription_layout.addWidget(self.ai_recommendations)
        
        # Resept formu
        form_scroll = QScrollArea()
        form_widget = QWidget()
        form_layout = QFormLayout(form_widget)
        form_layout.setSpacing(15)
        
        # ≈ûikay…ôt
        self.complaint_input = QPlainTextEdit()
        self.complaint_input.setPlaceholderText("Pasiyentin hal-hazƒ±rkƒ± ≈üikay…ôtl…ôrini daxil edin...")
        self.complaint_input.setMaximumHeight(80)
        
        # Diaqnoz
        self.diagnosis_input = QLineEdit()
        self.diagnosis_input.setPlaceholderText("Qoyulan diaqnozu daxil edin...")
        
        # D…ôrmanlar c…ôdv…ôli
        self.medications_table = QTableWidget(0, 4)
        self.medications_table.setHorizontalHeaderLabels(["D…ôrman Adƒ±", "Dozaj", "ƒ∞stifad…ô Qaydasƒ±", "M√ºdd…ôt"])
        self.medications_table.setMaximumHeight(200)
        
        # Input still…ôri
        input_style = """
            QLineEdit, QPlainTextEdit, QTableWidget {
                padding: 8px;
                border: 2px solid #e0e0e0;
                border-radius: 6px;
                font-size: 14px;
                background: white;
            }
            QLineEdit:focus, QPlainTextEdit:focus {
                border-color: #1e88e5;
            }
        """
        
        for widget in [self.complaint_input, self.diagnosis_input, self.medications_table]:
            widget.setStyleSheet(input_style)
        
        # Form …ôlav…ô et
        form_layout.addRow("ü©∫ ≈ûikay…ôt:", self.complaint_input)
        form_layout.addRow("üî¨ Diaqnoz:", self.diagnosis_input)
        form_layout.addRow("üíä D…ôrmanlar:", self.medications_table)
        
        # D…ôrman …ôlav…ô d√ºym…ôsi
        add_med_btn = QPushButton("‚ûï D…ôrman ∆èlav…ô Et")
        add_med_btn.clicked.connect(self.add_medication_row)
        add_med_btn.setStyleSheet("""
            QPushButton {
                background: #4caf50;
                color: white;
                border: none;
                padding: 8px;
                border-radius: 6px;
                font-weight: bold;
            }
        """)
        form_layout.addRow("", add_med_btn)
        
        form_scroll.setWidget(form_widget)
        form_scroll.setWidgetResizable(True)
        prescription_layout.addWidget(form_scroll)
        
        # Resept yadda saxla d√ºym…ôsi
        self.save_prescription_btn = QPushButton("üíæ Resepti Yadda Saxla")
        self.save_prescription_btn.setFont(QFont("Segoe UI", 14, QFont.Bold))
        self.save_prescription_btn.setFixedHeight(50)
        self.save_prescription_btn.clicked.connect(self.save_prescription)
        self.save_prescription_btn.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                          stop:0 #1e88e5, stop:1 #1976d2);
                color: white;
                border: none;
                border-radius: 10px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                          stop:0 #42a5f5, stop:1 #1e88e5);
            }
        """)
        prescription_layout.addWidget(self.save_prescription_btn)
        
        main_splitter.addWidget(prescription_frame)
        
        # Splitter nisb…ôtl…ôri
        main_splitter.setSizes([400, 600])
        
        layout.addWidget(main_splitter)
        
    def load_patient_history(self):
        """Pasiyent tarix√ß…ôsini y√ºkl…ô"""
        try:
            connection = self.db_manager.get_connection()
            cursor = connection.cursor()
            
            query = """
            SELECT r.id, r.≈üikay…ôt, r.diaqnoz, r.d…ôrmanlar, r.yaradƒ±lma_tarixi,
                   h.ad as hekim_adi, h.soyad as hekim_soyadi
            FROM reseptl…ôr r
            JOIN h…ôkiml…ôr h ON r.h…ôkim_id = h.id
            WHERE r.pasiyent_id = %s
            ORDER BY r.yaradƒ±lma_tarixi DESC
            LIMIT 10
            """
            
            cursor.execute(query, (self.patient_data['id'],))
            prescriptions = cursor.fetchall()
            
            self.patient_history = []
            self.history_list.clear()
            
            for prescription in prescriptions:
                presc_id, sikay…ôt, diaqnoz, d…ôrmanlar, yaradilma, hekim_ad, hekim_soyad = prescription
                
                # D…ôrmanlarƒ± parse et
                try:
                    if d…ôrmanlar:
                        meds = json.loads(d…ôrmanlar) if isinstance(d…ôrmanlar, str) else d…ôrmanlar
                    else:
                        meds = []
                except:
                    meds = []
                
                # Tarix√ß…ô m…ôlumatlarƒ±nƒ± saxla
                history_item = {
                    'id': presc_id,
                    '≈üikay…ôt': sikay…ôt,
                    'diaqnoz': diaqnoz,
                    'd…ôrmanlar': meds,
                    'tarix': yaradilma,
                    'h…ôkim': f"{hekim_ad} {hekim_soyad}"
                }
                self.patient_history.append(history_item)
                
                # List widget-…ô …ôlav…ô et
                item_text = f"""
                üìÖ {yaradilma.strftime('%d.%m.%Y')} - Dr. {hekim_ad} {hekim_soyad}
                ü©∫ ≈ûikay…ôt: {sikay…ôt[:50]}{'...' if len(sikay…ôt) > 50 else ''}
                üî¨ Diaqnoz: {diaqnoz[:50]}{'...' if len(diaqnoz) > 50 else ''}
                üíä D…ôrman sayƒ±: {len(meds)}
                """
                
                item = QListWidgetItem(item_text.strip())
                item.setData(Qt.UserRole, history_item)
                self.history_list.addItem(item)
                
            cursor.close()
            connection.close()
            
        except Exception as e:
            QMessageBox.warning(self, "X…ôta", f"Pasiyent tarix√ß…ôsi y√ºkl…ôn…ôrk…ôn x…ôta: {str(e)}")
            
    def analyze_with_ai(self):
        """AI il…ô pasiyent tarix√ß…ôsini t…ôhlil et"""
        if not self.patient_history:
            QMessageBox.information(self, "M…ôlumat", "Bu pasiyentin ke√ßmi≈ü resepti yoxdur.")
            return
            
        self.ai_analyze_btn.setEnabled(False)
        self.ai_analyze_btn.setText("ü§ñ T…ôhlil edilir...")
        
        # AI √º√ß√ºn tarix√ß…ô m…ôlumatlarƒ±nƒ± hazƒ±rla
        history_text = self.prepare_history_for_ai()
        
        # AI t…ôhlil thread-d…ô i≈ü…ô sal
        self.ai_thread = AIAnalysisThread(self.ai_assistant, self.patient_data, history_text)
        self.ai_thread.analysis_completed.connect(self.on_ai_analysis_completed)
        self.ai_thread.start()
        
    def prepare_history_for_ai(self):
        """AI √º√ß√ºn tarix√ß…ô m…ôtnini hazƒ±rla"""
        history_text = f"Pasiyent: {self.patient_data['ad']} {self.patient_data['soyad']}, Ya≈ü: {self.patient_data['ya≈ü']}\n\n"
        history_text += "KE√áMƒ∞≈û RESEPTL∆èRƒ∞:\n"
        
        for i, item in enumerate(self.patient_history, 1):
            history_text += f"\n{i}. Resept ({item['tarix'].strftime('%d.%m.%Y')}):\n"
            history_text += f"   ≈ûikay…ôt: {item['≈üikay…ôt']}\n"
            history_text += f"   Diaqnoz: {item['diaqnoz']}\n"
            history_text += f"   D…ôrmanlar:\n"
            
            for med in item['d…ôrmanlar']:
                if isinstance(med, dict):
                    history_text += f"     - {med.get('ad', 'Bilinm…ôy…ôn')}: {med.get('dozaj', '')} {med.get('qaydalar', '')}\n"
                else:
                    history_text += f"     - {med}\n"
                    
        return history_text
        
    def on_ai_analysis_completed(self, analysis_result):
        """AI t…ôhlil tamamlandƒ±"""
        self.ai_analyze_btn.setEnabled(True)
        self.ai_analyze_btn.setText("ü§ñ AI T…ôhlil Et")
        
        if analysis_result:
            self.ai_recommendations.setPlainText(analysis_result)
        else:
            self.ai_recommendations.setPlainText("AI t…ôhlil zamanƒ± x…ôta ba≈ü verdi.")
            
    def add_medication_row(self):
        """D…ôrman c…ôdv…ôlin…ô yeni s…ôtir …ôlav…ô et"""
        row_count = self.medications_table.rowCount()
        self.medications_table.insertRow(row_count)
        
        # H…ôr s√ºtun √º√ß√ºn bo≈ü item …ôlav…ô et
        for col in range(4):
            item = QTableWidgetItem("")
            self.medications_table.setItem(row_count, col, item)
            
    def save_prescription(self):
        """Resepti yadda saxla"""
        # M…ôcburi sah…ôl…ôri yoxla
        if not self.complaint_input.toPlainText().strip():
            QMessageBox.warning(self, "X…ôta", "≈ûikay…ôt sah…ôsi bo≈ü ola bilm…ôz!")
            return
            
        if not self.diagnosis_input.text().strip():
            QMessageBox.warning(self, "X…ôta", "Diaqnoz sah…ôsi bo≈ü ola bilm…ôz!")
            return
            
        # D…ôrmanlarƒ± topla
        medications = []
        for row in range(self.medications_table.rowCount()):
            med_name = self.medications_table.item(row, 0)
            dozaj = self.medications_table.item(row, 1)
            qaydalar = self.medications_table.item(row, 2)
            muddet = self.medications_table.item(row, 3)
            
            if med_name and med_name.text().strip():
                medications.append({
                    'ad': med_name.text().strip(),
                    'dozaj': dozaj.text().strip() if dozaj else '',
                    'qaydalar': qaydalar.text().strip() if qaydalar else '',
                    'm√ºdd…ôt': muddet.text().strip() if muddet else ''
                })
                
        if not medications:
            QMessageBox.warning(self, "X…ôta", "∆èn azƒ± bir d…ôrman …ôlav…ô etm…ôlisiniz!")
            return
            
        try:
            connection = self.db_manager.get_connection()
            cursor = connection.cursor()
            
            # Resepti …ôlav…ô et
            query = """
            INSERT INTO reseptl…ôr (pasiyent_id, h…ôkim_id, ≈üikay…ôt, diaqnoz, d…ôrmanlar, yaradƒ±lma_tarixi)
            VALUES (%s, %s, %s, %s, %s, %s)
            """
            
            values = (
                self.patient_data['id'],
                self.doctor_id,
                self.complaint_input.toPlainText().strip(),
                self.diagnosis_input.text().strip(),
                json.dumps(medications, ensure_ascii=False),
                datetime.now()
            )
            
            cursor.execute(query, values)
            connection.commit()
            
            cursor.close()
            connection.close()
            
            QMessageBox.information(self, "Uƒüur", "Resept uƒüurla yadda saxlanƒ±ldƒ±!")
            self.prescription_completed.emit()
            
        except Exception as e:
            QMessageBox.critical(self, "X…ôta", f"Resept yadda saxlanark…ôn x…ôta: {str(e)}")


class AIAnalysisThread(QThread):
    """AI t…ôhlil thread"""
    
    analysis_completed = pyqtSignal(str)
    
    def __init__(self, ai_assistant, patient_data, history_text):
        super().__init__()
        self.ai_assistant = ai_assistant
        self.patient_data = patient_data
        self.history_text = history_text
        
    def run(self):
        """AI t…ôhlil i≈üini icra et"""
        try:
            prompt = f"""
            A≈üaƒüƒ±dakƒ± pasiyent m…ôlumatlarƒ± v…ô ke√ßmi≈ü reseptl…ôrini t…ôhlil ed…ôr…ôk, 
            h…ôkim √º√ß√ºn t√∂vsiy…ôl…ôr hazƒ±rla:

            {self.history_text}

            Xahi≈ü edirik:
            1. Ke√ßmi≈ü ≈üikay…ôtl…ôrd…ô t…ôkrarlanan n√ºmun…ôl…ôri g√∂st…ôrin
            2. D…ôrman t…ôsirlilik t…ôhlili edin
            3. Yeni resept √º√ß√ºn t√∂vsiy…ôl…ôr verin
            4. Diqq…ôt edilm…ôli m…ôqamlarƒ± qeyd edin

            Cavabƒ± Az…ôrbaycan dilind…ô v…ô t…ôbib √º√ß√ºn praktik m…ôlumat ≈ü…ôklind…ô verin.
            """
            
            response = self.ai_assistant.get_medical_advice(prompt)
            self.analysis_completed.emit(response)
            
        except Exception as e:
            self.analysis_completed.emit(f"AI t…ôhlil x…ôtasƒ±: {str(e)}")