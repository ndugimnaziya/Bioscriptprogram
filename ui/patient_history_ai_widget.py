#!/usr/bin/env python3
"""
BioScript - Pasiyent Tarix√ß…ôsi v…ô AI K√∂m…ôk√ßisi
Ke√ßmi≈ü reseptl…ôrin AI il…ô t…ôhlili v…ô yeni resept yazma
"""

from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                            QPushButton, QFrame, QListWidget, QListWidgetItem,
                            QTextEdit, QLineEdit, QFormLayout, QDateEdit,
                            QComboBox, QMessageBox, QGroupBox, QScrollArea,
                            QSplitter, QTabWidget, QTableWidget, QTableWidgetItem,
                            QSpinBox, QPlainTextEdit)
from PyQt5.QtCore import Qt, pyqtSignal, QDate, QThread, QTimer
from PyQt5.QtGui import QFont
from datetime import datetime, date
import json

from gemini_ai import BioScriptAI

class PatientHistoryAIWidget(QWidget):
    """Pasiyent tarix√ß…ôsi v…ô AI k√∂m…ôk√ßili resept yazma"""
    
    prescription_completed = pyqtSignal()  # Resept tamamlandƒ±
    
    def __init__(self, db_manager, patient_data, doctor_id):
        super().__init__()
        self.db_manager = db_manager
        self.patient_data = patient_data
        self.doctor_id = doctor_id
        self.ai_assistant = BioScriptAI()
        self.patient_history = []
        
        self.init_ui()
        self.load_patient_history()
        
    def init_ui(self):
        """UI yaratma"""
        layout = QVBoxLayout(self)
        layout.setSpacing(20)
        layout.setContentsMargins(20, 20, 20, 20)
        
        # Pasiyent m…ôlumatlarƒ± ba≈ülƒ±ƒüƒ±
        patient_info = QLabel(f"üë§ {self.patient_data['ad']} {self.patient_data['soyad']} - Ya≈ü: {self.patient_data['ya≈ü']}")
        patient_info.setFont(QFont("Segoe UI", 18, QFont.Bold))
        patient_info.setAlignment(Qt.AlignCenter)
        patient_info.setStyleSheet("""
            color: #1565c0; 
            margin-bottom: 15px;
            padding: 15px;
            background: #e3f2fd;
            border-radius: 15px;
        """)
        layout.addWidget(patient_info)
        
        # Ana splitter
        main_splitter = QSplitter(Qt.Horizontal)
        
        # Sol t…ôr…ôf - Ke√ßmi≈ü reseptl…ôr v…ô AI k√∂m…ôk√ßi
        history_frame = QGroupBox("üìã Ke√ßmi≈ü Reseptl…ôr v…ô AI T…ôhlil")
        history_frame.setFont(QFont("Segoe UI", 14, QFont.Bold))
        history_frame.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #e3f2fd;
                border-radius: 10px;
                margin: 10px;
                padding: 15px;
                background: white;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 15px;
                padding: 0 10px;
                color: #1565c0;
                background: white;
            }
        """)
        
        history_layout = QVBoxLayout(history_frame)
        
        # Ke√ßmi≈ü reseptl…ôr listi - Clickable v…ô professional
        self.history_list = QListWidget()
        self.history_list.itemClicked.connect(self.show_prescription_details)
        self.history_list.setStyleSheet("""
            QListWidget {
                border: 2px solid #e3f2fd;
                border-radius: 12px;
                background: #fafafa;
                padding: 10px;
                font-family: 'Segoe UI';
                font-size: 13px;
            }
            QListWidget::item {
                padding: 15px;
                border: 1px solid #e8f4fd;
                border-radius: 8px;
                margin: 3px 0;
                background: white;
                cursor: pointer;
            }
            QListWidget::item:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                          stop:0 #e3f2fd, stop:1 #f0f8ff);
                border: 2px solid #2196f3;
                transform: scale(1.02);
            }
            QListWidget::item:selected {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                          stop:0 #2196f3, stop:1 #1976d2);
                color: white;
                border: 2px solid #1565c0;
                font-weight: bold;
            }
        """)
        
        history_layout.addWidget(self.history_list)
        
        # AI d√ºym…ôl…ôri
        ai_buttons_layout = QHBoxLayout()
        
        self.ai_analyze_btn = QPushButton("ü§ñ Tarix√ß…ô T…ôhlil Et")
        self.ai_analyze_btn.setFont(QFont("Segoe UI", 11, QFont.Bold))
        self.ai_analyze_btn.setFixedHeight(40)
        self.ai_analyze_btn.clicked.connect(self.analyze_with_ai)
        
        self.ai_direct_btn = QPushButton("üí° AI M…ôsl…ôh…ôt Al")
        self.ai_direct_btn.setFont(QFont("Segoe UI", 11, QFont.Bold))
        self.ai_direct_btn.setFixedHeight(40)
        self.ai_direct_btn.clicked.connect(self.get_direct_ai_advice)
        
        # D√ºym…ô still…ôri
        ai_button_style = """
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                          stop:0 #ff9800, stop:1 #f57c00);
                color: white;
                border: none;
                border-radius: 8px;
                font-weight: bold;
                margin: 2px;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                          stop:0 #ffb74d, stop:1 #ff9800);
            }
            QPushButton:disabled {
                background: #cccccc;
                color: #666666;
            }
        """
        
        self.ai_analyze_btn.setStyleSheet(ai_button_style)
        self.ai_direct_btn.setStyleSheet(ai_button_style)
        
        ai_buttons_layout.addWidget(self.ai_analyze_btn)
        ai_buttons_layout.addWidget(self.ai_direct_btn)
        history_layout.addLayout(ai_buttons_layout)
        
        main_splitter.addWidget(history_frame)
        
        # Saƒü t…ôr…ôf - Yeni resept yazma
        prescription_frame = QGroupBox("üìù Yeni Resept")
        prescription_frame.setFont(QFont("Segoe UI", 14, QFont.Bold))
        prescription_frame.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #e3f2fd;
                border-radius: 10px;
                margin: 10px;
                padding: 15px;
                background: white;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 15px;
                padding: 0 10px;
                color: #1565c0;
                background: white;
            }
        """)
        
        prescription_layout = QVBoxLayout(prescription_frame)
        
        # AI t√∂vsiy…ôl…ôri sah…ôsi - Professional v…ô scroll d√ºzg√ºn i≈ül…ôsin
        ai_label = QLabel("ü§ñ AI T√∂vsiy…ôl…ôri v…ô T…ôhlil:")
        ai_label.setFont(QFont("Segoe UI", 12, QFont.Bold))
        ai_label.setStyleSheet("color: #1565c0; margin: 8px 0;")
        
        self.ai_recommendations = QTextEdit()
        self.ai_recommendations.setPlaceholderText("AI t…ôhlil v…ô m…ôsl…ôh…ôt almaq √º√ß√ºn sol t…ôr…ôfd…ôn d√ºym…ôl…ôr…ô basƒ±n...")
        self.ai_recommendations.setMaximumHeight(180)
        self.ai_recommendations.setReadOnly(True)
        
        # Yeni mesajlarƒ± altda g√∂st…ôrm…ôk √º√ß√ºn
        self.ai_recommendations.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        
        self.ai_recommendations.setStyleSheet("""
            QTextEdit {
                border: 2px solid #e3f2fd;
                border-radius: 12px;
                padding: 15px;
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                          stop:0 #f8f9fa, stop:1 #ffffff);
                font-family: 'Segoe UI';
                font-size: 13px;
                color: #2c3e50;
                line-height: 1.5;
            }
            QTextEdit:focus {
                border: 2px solid #2196f3;
                background: white;
            }
            QScrollBar:vertical {
                background: #f0f0f0;
                width: 12px;
                border-radius: 6px;
            }
            QScrollBar::handle:vertical {
                background: #2196f3;
                border-radius: 6px;
                min-height: 20px;
            }
        """)
        
        prescription_layout.addWidget(ai_label)
        prescription_layout.addWidget(self.ai_recommendations)
        
        # Resept formu
        form_scroll = QScrollArea()
        form_widget = QWidget()
        form_layout = QFormLayout(form_widget)
        form_layout.setSpacing(15)
        
        # ≈ûikay…ôt
        self.complaint_input = QPlainTextEdit()
        self.complaint_input.setPlaceholderText("Pasiyentin hal-hazƒ±rkƒ± ≈üikay…ôtl…ôrini daxil edin...")
        self.complaint_input.setMaximumHeight(80)
        
        # Diaqnoz
        self.diagnosis_input = QLineEdit()
        self.diagnosis_input.setPlaceholderText("Qoyulan diaqnozu daxil edin...")
        
        # D…ôrmanlar c…ôdv…ôli
        self.medications_table = QTableWidget(0, 4)
        self.medications_table.setHorizontalHeaderLabels(["D…ôrman Adƒ±", "Dozaj", "ƒ∞stifad…ô Qaydasƒ±", "M√ºdd…ôt"])
        self.medications_table.setMaximumHeight(200)
        
        # Input still…ôri
        input_style = """
            QLineEdit, QPlainTextEdit, QTableWidget {
                padding: 8px;
                border: 2px solid #e0e0e0;
                border-radius: 6px;
                font-size: 14px;
                background: white;
            }
            QLineEdit:focus, QPlainTextEdit:focus {
                border-color: #1e88e5;
            }
        """
        
        for widget in [self.complaint_input, self.diagnosis_input, self.medications_table]:
            widget.setStyleSheet(input_style)
        
        # Form …ôlav…ô et
        form_layout.addRow("ü©∫ ≈ûikay…ôt:", self.complaint_input)
        form_layout.addRow("üî¨ Diaqnoz:", self.diagnosis_input)
        form_layout.addRow("üíä D…ôrmanlar:", self.medications_table)
        
        # D…ôrman …ôlav…ô d√ºym…ôsi
        add_med_btn = QPushButton("‚ûï D…ôrman ∆èlav…ô Et")
        add_med_btn.clicked.connect(self.add_medication_row)
        add_med_btn.setStyleSheet("""
            QPushButton {
                background: #4caf50;
                color: white;
                border: none;
                padding: 8px;
                border-radius: 6px;
                font-weight: bold;
            }
        """)
        form_layout.addRow("", add_med_btn)
        
        form_scroll.setWidget(form_widget)
        form_scroll.setWidgetResizable(True)
        prescription_layout.addWidget(form_scroll)
        
        # Resept yadda saxla d√ºym…ôsi
        self.save_prescription_btn = QPushButton("üíæ Resepti Yadda Saxla")
        self.save_prescription_btn.setFont(QFont("Segoe UI", 14, QFont.Bold))
        self.save_prescription_btn.setFixedHeight(50)
        self.save_prescription_btn.clicked.connect(self.save_prescription)
        self.save_prescription_btn.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                          stop:0 #1e88e5, stop:1 #1976d2);
                color: white;
                border: none;
                border-radius: 10px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                          stop:0 #42a5f5, stop:1 #1e88e5);
            }
        """)
        prescription_layout.addWidget(self.save_prescription_btn)
        
        main_splitter.addWidget(prescription_frame)
        
        # √ú√ß√ºnc√º b√∂lm…ô - AI Chat B√∂lm…ôsi
        chat_frame = QGroupBox("üí¨ AI H…ôkim Chat")
        chat_frame.setFont(QFont("Segoe UI", 14, QFont.Bold))
        chat_frame.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 2px solid #e8f5e8;
                border-radius: 10px;
                margin: 10px;
                padding: 15px;
                background: white;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 15px;
                padding: 0 10px;
                color: #2e7d32;
                background: white;
            }
        """)
        
        chat_layout = QVBoxLayout(chat_frame)
        
        # Chat tarixi
        self.chat_history = QTextEdit()
        self.chat_history.setMaximumHeight(300)
        self.chat_history.setReadOnly(True)
        self.chat_history.setStyleSheet("""
            QTextEdit {
                border: 2px solid #e8f5e8;
                border-radius: 8px;
                padding: 10px;
                background: #f9fffe;
                font-family: 'Segoe UI';
                font-size: 12px;
            }
        """)
        
        # Chat input
        self.chat_input = QLineEdit()
        self.chat_input.setPlaceholderText("AI h…ôkim…ô sualƒ±nƒ±zƒ± yazƒ±n...")
        self.chat_input.returnPressed.connect(self.handle_chat_message)
        
        send_chat_btn = QPushButton("G√∂nd…ôr")
        send_chat_btn.clicked.connect(self.handle_chat_message)
        send_chat_btn.setStyleSheet("""
            QPushButton {
                background: #4caf50;
                color: white;
                border: none;
                padding: 8px 15px;
                border-radius: 6px;
                font-weight: bold;
            }
        """)
        
        # Chat input layout
        chat_input_layout = QHBoxLayout()
        chat_input_layout.addWidget(self.chat_input)
        chat_input_layout.addWidget(send_chat_btn)
        
        chat_layout.addWidget(self.chat_history)
        chat_layout.addLayout(chat_input_layout)
        
        main_splitter.addWidget(chat_frame)
        
        # Splitter nisb…ôtl…ôri - 3 hiss…ô √º√ß√ºn
        main_splitter.setSizes([300, 400, 300])
        
        layout.addWidget(main_splitter)
        
    def load_patient_history(self):
        """Pasiyent tarix√ß…ôsini y√ºkl…ô"""
        try:
            connection = self.db_manager.get_connection()
            if not connection or not connection.is_connected():
                QMessageBox.warning(self, "Veril…ônl…ôr Bazasƒ± X…ôtasƒ±", 
                                  "Pasiyent tarix√ß…ôsi yoxlanƒ±ldƒ±. Connection not available")
                return
            cursor = connection.cursor(dictionary=True)
            
            query = """
            SELECT p.id, p.complaint as ≈üikay…ôt, p.diagnosis as diaqnoz, 
                   '' as d…ôrmanlar, p.issued_at as yaradƒ±lma_tarixi,
                   d.name as hekim_adi, d.surname as hekim_soyadi
            FROM prescriptions p
            JOIN doctors d ON p.doctor_id = d.id
            WHERE p.patient_id = %s
            ORDER BY p.issued_at DESC
            LIMIT 10
            """
            
            cursor.execute(query, (self.patient_data['id'],))
            prescriptions = cursor.fetchall()
            
            self.patient_history = []
            self.history_list.clear()
            
            for prescription in prescriptions:
                # Dictionary formatƒ±nda m…ôlumatlarƒ± al
                presc_id = prescription['id']
                sikay…ôt = prescription['≈üikay…ôt'] or ''
                diaqnoz = prescription['diaqnoz'] or ''
                d…ôrmanlar = prescription['d…ôrmanlar'] or ''
                yaradilma = prescription['yaradƒ±lma_tarixi']
                hekim_ad = prescription['hekim_adi'] or ''
                hekim_soyad = prescription['hekim_soyadi'] or ''
                
                # D…ôrmanlarƒ± parse et
                try:
                    if d…ôrmanlar:
                        meds = json.loads(d…ôrmanlar) if isinstance(d…ôrmanlar, str) else d…ôrmanlar
                    else:
                        meds = []
                except:
                    meds = []
                
                # Tarixi d√ºzg√ºn format et
                yaradilma_obj = yaradilma
                if isinstance(yaradilma, str):
                    # String formatƒ±ndadƒ±rsa parse et
                    try:
                        from datetime import datetime
                        yaradilma_obj = datetime.strptime(yaradilma, '%Y-%m-%d %H:%M:%S')
                        tarix_str = yaradilma_obj.strftime('%d.%m.%Y')
                    except:
                        try:
                            yaradilma_obj = datetime.strptime(yaradilma[:19], '%Y-%m-%d %H:%M:%S')
                            tarix_str = yaradilma_obj.strftime('%d.%m.%Y')
                        except:
                            tarix_str = yaradilma[:10] if len(yaradilma) >= 10 else yaradilma
                            yaradilma_obj = yaradilma
                else:
                    # Datetime obyektidirs…ô
                    tarix_str = yaradilma.strftime('%d.%m.%Y')
                
                # Tarix√ß…ô m…ôlumatlarƒ±nƒ± saxla
                history_item = {
                    'id': presc_id,
                    '≈üikay…ôt': sikay…ôt,
                    'diaqnoz': diaqnoz,
                    'd…ôrmanlar': meds,
                    'tarix': yaradilma_obj,
                    'h…ôkim': f"{hekim_ad} {hekim_soyad}"
                }
                self.patient_history.append(history_item)
                
                # List widget-…ô …ôlav…ô et - h…ôkim adƒ± g√∂r√ºnm…ôsin
                item_text = f"""
                üìÖ {tarix_str}
                ü©∫ ≈ûikay…ôt: {sikay…ôt[:50]}{'...' if len(sikay…ôt) > 50 else ''}
                üî¨ Diaqnoz: {diaqnoz[:50]}{'...' if len(diaqnoz) > 50 else ''}
                üíä D…ôrman sayƒ±: {len(meds)}
                """
                
                item = QListWidgetItem(item_text.strip())
                item.setData(Qt.UserRole, history_item)
                self.history_list.addItem(item)
                
            cursor.close()
            
        except Exception as e:
            QMessageBox.warning(self, "X…ôta", f"Pasiyent tarix√ß…ôsi y√ºkl…ôn…ôrk…ôn x…ôta: {str(e)}")
            
    def analyze_with_ai(self):
        """AI il…ô pasiyent tarix√ß…ôsini t…ôhlil et"""
        if not self.patient_history:
            QMessageBox.information(self, "M…ôlumat", "Bu pasiyentin ke√ßmi≈ü resepti yoxdur.")
            return
            
        self.ai_analyze_btn.setEnabled(False)
        self.ai_analyze_btn.setText("ü§ñ T…ôhlil edilir...")
        
        # AI √º√ß√ºn tarix√ß…ô m…ôlumatlarƒ±nƒ± hazƒ±rla
        history_text = self.prepare_history_for_ai()
        
        # AI t…ôhlil thread-d…ô i≈ü…ô sal
        self.ai_thread = AIAnalysisThread(self.ai_assistant, self.patient_data, history_text)
        self.ai_thread.analysis_completed.connect(self.on_ai_analysis_completed)
        self.ai_thread.start()
    
    def get_direct_ai_advice(self):
        """Birba≈üa AI m…ôsl…ôh…ôt al (tarix√ß…ô olmadan)"""
        self.ai_direct_btn.setEnabled(False)
        self.ai_direct_btn.setText("üí° M…ôsl…ôh…ôt alƒ±nƒ±r...")
        
        # Hazƒ±rkƒ± ≈üikay…ôt v…ô diaqnoz m…ôlumatlarƒ±nƒ± al
        complaint = self.complaint_input.toPlainText().strip()
        diagnosis = self.diagnosis_input.text().strip()
        
        if not complaint and not diagnosis:
            QMessageBox.information(self, "M…ôlumat", 
                                  "M…ôsl…ôh…ôt almaq √º√ß√ºn ≈üikay…ôt v…ô ya diaqnoz yazƒ±n.")
            self.ai_direct_btn.setEnabled(True)
            self.ai_direct_btn.setText("üí° AI M…ôsl…ôh…ôt Al")
            return
        
        # AI √º√ß√ºn prompt hazƒ±rla
        direct_prompt = f"""
        Pasiyent: {self.patient_data['ad']} {self.patient_data['soyad']}, Ya≈ü: {self.patient_data['ya≈ü']}
        
        ≈ûikay…ôt: {complaint if complaint else 'Qeyd edilm…ôyib'}
        Diaqnoz: {diagnosis if diagnosis else 'Qeyd edilm…ôyib'}
        
        Bu m…ôlumatlara …ôsas…ôn h…ôkim √º√ß√ºn praktik m…ôsl…ôh…ôt verin:
        1. M√ºalic…ô yana≈ümasƒ±
        2. T√∂vsiy…ô edil…ôn d…ôrmanlar
        3. Diqq…ôt edilm…ôli m…ôqamlar
        4. ∆èlav…ô m√ºayin…ô t√∂vsiy…ôl…ôri
        
        Cavabƒ± Az…ôrbaycan dilind…ô, qƒ±sa v…ô aydƒ±n t…ôqdim edin.
        """
        
        # AI t…ôhlil thread-d…ô i≈ü…ô sal
        self.ai_direct_thread = AIAnalysisThread(self.ai_assistant, self.patient_data, direct_prompt)
        self.ai_direct_thread.analysis_completed.connect(self.on_direct_ai_completed)
        self.ai_direct_thread.start()
        
    def prepare_history_for_ai(self):
        """AI √º√ß√ºn tarix√ß…ô m…ôtnini hazƒ±rla"""
        history_text = f"Pasiyent: {self.patient_data['ad']} {self.patient_data['soyad']}, Ya≈ü: {self.patient_data['ya≈ü']}\n\n"
        history_text += "KE√áMƒ∞≈û RESEPTL∆èRƒ∞:\n"
        
        for i, item in enumerate(self.patient_history, 1):
            # Tarixi d√ºzg√ºn format et
            try:
                if isinstance(item['tarix'], str):
                    tarix_str = item['tarix'][:10]
                else:
                    tarix_str = item['tarix'].strftime('%d.%m.%Y')
            except:
                tarix_str = "Bilinmir"
            
            history_text += f"\n{i}. Resept ({tarix_str}):\n"
            history_text += f"   ≈ûikay…ôt: {item['≈üikay…ôt']}\n"
            history_text += f"   Diaqnoz: {item['diaqnoz']}\n"
            history_text += f"   D…ôrmanlar:\n"
            
            for med in item['d…ôrmanlar']:
                if isinstance(med, dict):
                    history_text += f"     - {med.get('ad', 'Bilinm…ôy…ôn')}: {med.get('dozaj', '')} {med.get('qaydalar', '')}\n"
                else:
                    history_text += f"     - {med}\n"
                    
        return history_text
        
    def on_ai_analysis_completed(self, analysis_result):
        """AI t…ôhlil tamamlandƒ±"""
        self.ai_analyze_btn.setEnabled(True)
        self.ai_analyze_btn.setText("ü§ñ Tarix√ß…ô T…ôhlil Et")
        
        if analysis_result:
            # Yeni mesajƒ± append et v…ô a≈üaƒüƒ± scroll et
            current_text = self.ai_recommendations.toPlainText()
            if current_text:
                new_text = current_text + "\n\n" + "="*50 + "\nü§ñ TARIX√á∆è T∆èHLƒ∞L N∆èTƒ∞C∆èSƒ∞\n" + "="*50 + "\n" + analysis_result
            else:
                new_text = "ü§ñ TARIX√á∆è T∆èHLƒ∞L N∆èTƒ∞C∆èSƒ∞\n" + "="*50 + "\n" + analysis_result
            
            self.ai_recommendations.setPlainText(new_text)
            # A≈üaƒüƒ± scroll et
            scrollbar = self.ai_recommendations.verticalScrollBar()
            scrollbar.setValue(scrollbar.maximum())
        else:
            self.ai_recommendations.append("\n‚ùå AI t…ôhlil zamanƒ± x…ôta ba≈ü verdi.")
    
    def on_direct_ai_completed(self, analysis_result):
        """Birba≈üa AI m…ôsl…ôh…ôt tamamlandƒ±"""
        self.ai_direct_btn.setEnabled(True)
        self.ai_direct_btn.setText("üí° AI M…ôsl…ôh…ôt Al")
        
        if analysis_result:
            # Yeni mesajƒ± append et v…ô a≈üaƒüƒ± scroll et
            current_text = self.ai_recommendations.toPlainText()
            if current_text:
                new_text = current_text + "\n\n" + "="*50 + "\nüí° AI M∆èSL∆èH∆èT\n" + "="*50 + "\n" + analysis_result
            else:
                new_text = "üí° AI M∆èSL∆èH∆èT\n" + "="*50 + "\n" + analysis_result
            
            self.ai_recommendations.setPlainText(new_text)
            # A≈üaƒüƒ± scroll et
            scrollbar = self.ai_recommendations.verticalScrollBar()
            scrollbar.setValue(scrollbar.maximum())
        else:
            self.ai_recommendations.append("\n‚ùå AI m…ôsl…ôh…ôt zamanƒ± x…ôta ba≈ü verdi.")
    
    def show_prescription_details(self, item):
        """Resept detallarƒ±nƒ± g√∂st…ôr"""
        history_data = item.data(Qt.UserRole)
        if history_data:
            # Detallƒ± m…ôlumat dialog a√ßaq
            details = f"""
üìã RESEPT DETALLARI

üìÖ Tarix: {history_data['tarix'].strftime('%d.%m.%Y %H:%M') if hasattr(history_data['tarix'], 'strftime') else str(history_data['tarix'])}
üë®‚Äç‚öïÔ∏è H…ôkim: {history_data['h…ôkim']}

ü©∫ ≈ûƒ∞KAY∆èT:
{history_data['≈üikay…ôt']}

üî¨ Dƒ∞AQNOZ:
{history_data['diaqnoz']}

üíä D∆èRMANLAR:
"""
            
            for i, med in enumerate(history_data['d…ôrmanlar'], 1):
                if isinstance(med, dict):
                    details += f"{i}. {med.get('ad', 'Bilinm…ôy…ôn')}\n"
                    details += f"   Dozaj: {med.get('dozaj', 'Qeyd edilm…ôyib')}\n"
                    details += f"   Qaydalar: {med.get('qaydalar', 'Qeyd edilm…ôyib')}\n"
                    details += f"   M√ºdd…ôt: {med.get('m√ºdd…ôt', 'Qeyd edilm…ôyib')}\n\n"
                else:
                    details += f"{i}. {med}\n\n"
            
            QMessageBox.information(self, "Resept Detallarƒ±", details)
    
    def handle_chat_message(self):
        """Chat mesajƒ± g√∂nd…ôr"""
        message = self.chat_input.text().strip()
        if not message:
            return
        
        # ƒ∞stifad…ô√ßi mesajƒ±nƒ± …ôlav…ô et
        self.add_chat_message("Siz", message, "#e3f2fd")
        self.chat_input.clear()
        
        # AI cavabƒ±nƒ± al
        prompt = f"""
        Pasiyent: {self.patient_data['ad']} {self.patient_data['soyad']}, Ya≈ü: {self.patient_data['ya≈ü']}
        
        H…ôkim sualƒ±: {message}
        
        Bu suala professional h…ôkim kimi cavab verin. Az…ôrbaycan dilind…ô qƒ±sa v…ô aydƒ±n olsun.
        """
        
        try:
            response = self.ai_assistant.get_response(prompt)
            self.add_chat_message("AI H…ôkim", response, "#e8f5e8")
        except Exception as e:
            self.add_chat_message("AI H…ôkim", f"X…ôta: {str(e)}", "#ffebee")
    
    def add_chat_message(self, sender, message, bg_color):
        """Chat mesajƒ± …ôlav…ô et"""
        current_time = datetime.now().strftime("%H:%M")
        
        # HTML formatƒ±nda mesaj …ôlav…ô et
        html_message = f"""
        <div style='margin: 8px 0; background: {bg_color}; border-radius: 8px; padding: 10px;'>
            <strong>{sender}</strong> <small style='color: #666;'>{current_time}</small><br>
            {message}
        </div>
        """
        
        self.chat_history.append(html_message)
        
        # A≈üaƒüƒ± scroll et
        scrollbar = self.chat_history.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())
            
    def add_medication_row(self):
        """D…ôrman c…ôdv…ôlin…ô yeni s…ôtir …ôlav…ô et"""
        row_count = self.medications_table.rowCount()
        self.medications_table.insertRow(row_count)
        
        # H…ôr s√ºtun √º√ß√ºn d√ºzenlen…ô bil…ôn item …ôlav…ô et
        for col in range(4):
            item = QTableWidgetItem("")
            item.setFlags(Qt.ItemIsSelectable | Qt.ItemIsEditable | Qt.ItemIsEnabled)
            self.medications_table.setItem(row_count, col, item)
        
        # C…ôdv…ôli update et v…ô g√∂r√ºn√ºrl√ºy√º t…ômin et
        self.medications_table.resizeColumnsToContents()
        self.medications_table.scrollToBottom()
            
    def save_prescription(self):
        """Resepti yadda saxla"""
        # M…ôcburi sah…ôl…ôri yoxla
        if not self.complaint_input.toPlainText().strip():
            QMessageBox.warning(self, "X…ôta", "≈ûikay…ôt sah…ôsi bo≈ü ola bilm…ôz!")
            return
            
        if not self.diagnosis_input.text().strip():
            QMessageBox.warning(self, "X…ôta", "Diaqnoz sah…ôsi bo≈ü ola bilm…ôz!")
            return
            
        # D…ôrmanlarƒ± topla
        medications = []
        for row in range(self.medications_table.rowCount()):
            med_name = self.medications_table.item(row, 0)
            dozaj = self.medications_table.item(row, 1)
            qaydalar = self.medications_table.item(row, 2)
            muddet = self.medications_table.item(row, 3)
            
            if med_name and med_name.text().strip():
                medications.append({
                    'ad': med_name.text().strip(),
                    'dozaj': dozaj.text().strip() if dozaj else '',
                    'qaydalar': qaydalar.text().strip() if qaydalar else '',
                    'm√ºdd…ôt': muddet.text().strip() if muddet else ''
                })
                
        if not medications:
            QMessageBox.warning(self, "X…ôta", "∆èn azƒ± bir d…ôrman …ôlav…ô etm…ôlisiniz!")
            return
            
        try:
            connection = self.db_manager.get_connection()
            if not connection or not connection.is_connected():
                QMessageBox.critical(self, "Veril…ônl…ôr Bazasƒ± X…ôtasƒ±", 
                                   "Veril…ônl…ôr bazasƒ±na baƒülantƒ± yoxdur!")
                return
            cursor = connection.cursor(dictionary=True)
            
            # Resepti …ôlav…ô et
            # ƒ∞lk n√∂vb…ôd…ô prescription yaradƒ±rƒ±q
            prescription_query = """
            INSERT INTO prescriptions (patient_id, doctor_id, hospital_id, complaint, diagnosis, issued_at)
            VALUES (%s, %s, %s, %s, %s, %s)
            """
            
            # Prescription …ôlav…ô et
            prescription_values = (
                self.patient_data['id'],
                self.doctor_id,
                6,  # Nax√ßƒ±van D√∂vl…ôt Universitetinin X…ôst…ôxanasƒ±
                self.complaint_input.toPlainText().strip(),
                self.diagnosis_input.text().strip(),
                datetime.now()
            )
            
            cursor.execute(prescription_query, prescription_values)
            prescription_id = cursor.lastrowid
            
            # H…ôr d…ôrman √º√ß√ºn prescription_items …ôlav…ô et
            if medications:
                item_query = """
                INSERT INTO prescription_items (prescription_id, name, dosage, instructions)
                VALUES (%s, %s, %s, %s)
                """
                
                for med in medications:
                    # SQL c…ôdv…ôlin…ô uyƒüun formatda m…ôlumatlarƒ± hazƒ±rla
                    instructions = med['qaydalar']
                    if med['m√ºdd…ôt']:
                        instructions += f" - {med['m√ºdd…ôt']}"
                    
                    item_values = (
                        prescription_id,
                        med['ad'],
                        med['dozaj'],
                        instructions
                    )
                    cursor.execute(item_query, item_values)
            
            connection.commit()
            
            cursor.close()
            
            QMessageBox.information(self, "Uƒüur", "Resept uƒüurla yadda saxlanƒ±ldƒ±!")
            self.prescription_completed.emit()
            
        except Exception as e:
            QMessageBox.critical(self, "X…ôta", f"Resept yadda saxlanark…ôn x…ôta: {str(e)}")


class AIAnalysisThread(QThread):
    """AI t…ôhlil thread"""
    
    analysis_completed = pyqtSignal(str)
    
    def __init__(self, ai_assistant, patient_data, history_text):
        super().__init__()
        self.ai_assistant = ai_assistant
        self.patient_data = patient_data
        self.history_text = history_text
        
    def run(self):
        """AI t…ôhlil i≈üini icra et"""
        try:
            prompt = f"""
            A≈üaƒüƒ±dakƒ± pasiyent m…ôlumatlarƒ± v…ô ke√ßmi≈ü reseptl…ôrini t…ôhlil ed…ôr…ôk, 
            h…ôkim √º√ß√ºn t√∂vsiy…ôl…ôr hazƒ±rla:

            {self.history_text}

            Xahi≈ü edirik:
            1. Ke√ßmi≈ü ≈üikay…ôtl…ôrd…ô t…ôkrarlanan n√ºmun…ôl…ôri g√∂st…ôrin
            2. D…ôrman t…ôsirlilik t…ôhlili edin
            3. Yeni resept √º√ß√ºn t√∂vsiy…ôl…ôr verin
            4. Diqq…ôt edilm…ôli m…ôqamlarƒ± qeyd edin

            Cavabƒ± Az…ôrbaycan dilind…ô v…ô t…ôbib √º√ß√ºn praktik m…ôlumat ≈ü…ôklind…ô verin.
            """
            
            response = self.ai_assistant.get_response(prompt)
            self.analysis_completed.emit(response)
            
        except Exception as e:
            self.analysis_completed.emit(f"AI t…ôhlil x…ôtasƒ±: {str(e)}")