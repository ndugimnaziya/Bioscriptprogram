"""
BioScript - Resept Yazma Editoru
Resept yaratma v…ô redakt…ô interfeysi
"""

from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                            QLineEdit, QPushButton, QTableWidget, QTableWidgetItem,
                            QTextEdit, QComboBox, QFormLayout, QGroupBox,
                            QSpinBox, QFrame, QSplitter, QScrollArea,
                            QMessageBox, QDateEdit, QHeaderView, QAbstractItemView)
from PyQt5.QtCore import Qt, QDate, pyqtSignal
from PyQt5.QtGui import QFont

class PrescriptionEditorWidget(QWidget):
    """Resept yazma widget"""
    
    prescription_saved = pyqtSignal(int)  # prescription_id
    
    def __init__(self, db_manager):
        super().__init__()
        self.db_manager = db_manager
        self.current_patient = None
        self.current_doctor = None
        self.current_medications = []
        
        self.init_ui()
        self.load_medications_list()
    
    def init_ui(self):
        """ƒ∞stifad…ô√ßi interfeysi ba≈ülatma"""
        main_layout = QVBoxLayout(self)
        main_layout.setSpacing(15)
        
        # Pasiyent m…ôlumat ba≈ülƒ±ƒüƒ±
        self.create_patient_header(main_layout)
        
        # Splitter - resept formu v…ô d…ôrman siyahƒ±sƒ±
        splitter = QSplitter(Qt.Horizontal)
        
        # Sol t…ôr…ôf - resept formu
        self.create_prescription_form(splitter)
        
        # Saƒü t…ôr…ôf - d…ôrman …ôlav…ô etm…ô
        self.create_medication_panel(splitter)
        
        # Splitter nisb…ôtl…ôri
        splitter.setStretchFactor(0, 2)  # Form
        splitter.setStretchFactor(1, 1)   # D…ôrmanlar
        
        main_layout.addWidget(splitter)
        
        # Alt hiss…ô - …ôlav…ô edilmi≈ü d…ôrmanlar
        self.create_medications_table(main_layout)
        
        # ∆èm…ôliyyat d√ºym…ôl…ôri
        self.create_action_buttons(main_layout)
        
        # Ba≈ülanƒüƒ±c v…ôziyy…ôt
        self.set_enabled(False)
    
    def create_patient_header(self, parent_layout):
        """Pasiyent m…ôlumat ba≈ülƒ±ƒüƒ±"""
        self.patient_header = QFrame()
        self.patient_header.setFrameStyle(QFrame.Box)
        self.patient_header.setStyleSheet("""
            QFrame {
                background-color: #e3f2fd;
                border: 2px solid #2196f3;
                border-radius: 8px;
                padding: 10px;
            }
        """)
        
        header_layout = QHBoxLayout(self.patient_header)
        
        # Pasiyent m…ôlumatlarƒ±
        self.patient_info_label = QLabel("Pasiyent se√ßilm…ôyib")
        self.patient_info_label.setFont(QFont("Arial", 14, QFont.Bold))
        self.patient_info_label.setStyleSheet("color: #1976d2;")
        
        # Tarix
        date_label = QLabel("Tarix:")
        self.prescription_date = QDateEdit()
        self.prescription_date.setDate(QDate.currentDate())
        self.prescription_date.setCalendarPopup(True)
        
        header_layout.addWidget(self.patient_info_label)
        header_layout.addStretch()
        header_layout.addWidget(date_label)
        header_layout.addWidget(self.prescription_date)
        
        parent_layout.addWidget(self.patient_header)
    
    def create_prescription_form(self, parent_widget):
        """Resept formu yaratma"""
        form_frame = QFrame()
        form_layout = QVBoxLayout(form_frame)
        
        # ≈ûikay…ôt
        complaint_group = QGroupBox("Pasiyent ≈ûikay…ôti")
        complaint_layout = QVBoxLayout(complaint_group)
        
        self.complaint_text = QTextEdit()
        self.complaint_text.setPlaceholderText("Pasiyentin ≈üikay…ôtl…ôrini qeyd edin...")
        self.complaint_text.setMaximumHeight(100)
        complaint_layout.addWidget(self.complaint_text)
        
        form_layout.addWidget(complaint_group)
        
        # Diaqnoz
        diagnosis_group = QGroupBox("Diaqnoz")
        diagnosis_layout = QVBoxLayout(diagnosis_group)
        
        self.diagnosis_text = QTextEdit()
        self.diagnosis_text.setPlaceholderText("Diaqnozu qeyd edin...")
        self.diagnosis_text.setMaximumHeight(100)
        diagnosis_layout.addWidget(self.diagnosis_text)
        
        form_layout.addWidget(diagnosis_group)
        
        # Qeydl…ôr
        notes_group = QGroupBox("∆èlav…ô Qeydl…ôr")
        notes_layout = QVBoxLayout(notes_group)
        
        self.notes_text = QTextEdit()
        self.notes_text.setPlaceholderText("∆èlav…ô qeydl…ôr, t√∂vsiy…ôl…ôr...")
        self.notes_text.setMaximumHeight(80)
        notes_layout.addWidget(self.notes_text)
        
        form_layout.addWidget(notes_group)
        form_layout.addStretch()
        
        parent_widget.addWidget(form_frame)
    
    def create_medication_panel(self, parent_widget):
        """D…ôrman …ôlav…ô etm…ô paneli"""
        med_frame = QFrame()
        med_layout = QVBoxLayout(med_frame)
        
        # Ba≈ülƒ±q
        med_label = QLabel("D…ôrman ∆èlav…ô Et")
        med_label.setFont(QFont("Arial", 12, QFont.Bold))
        med_layout.addWidget(med_label)
        
        # D…ôrman formu
        med_form = QGroupBox("D…ôrman M…ôlumatlarƒ±")
        form_layout = QFormLayout(med_form)
        
        # D…ôrman adƒ±
        self.medication_combo = QComboBox()
        self.medication_combo.setEditable(True)
        self.medication_combo.setPlaceholderText("D…ôrman se√ßin v…ô ya yazƒ±n...")
        form_layout.addRow("D…ôrman adƒ±:", self.medication_combo)
        
        # Dozaj
        self.dosage_input = QLineEdit()
        self.dosage_input.setPlaceholderText("m…ôs: 500mg")
        form_layout.addRow("Dozaj:", self.dosage_input)
        
        # Tezlik
        self.frequency_combo = QComboBox()
        self.frequency_combo.addItems([
            "G√ºnd…ô 1 d…ôf…ô",
            "G√ºnd…ô 2 d…ôf…ô", 
            "G√ºnd…ô 3 d…ôf…ô",
            "G√ºnd…ô 4 d…ôf…ô",
            "H…ôr 4 saatda bir",
            "H…ôr 6 saatda bir",
            "H…ôr 8 saatda bir",
            "H…ôr 12 saatda bir",
            "Lazƒ±m olduqda"
        ])
        self.frequency_combo.setEditable(True)
        form_layout.addRow("Tezlik:", self.frequency_combo)
        
        # M√ºdd…ôt
        self.duration_combo = QComboBox()
        self.duration_combo.addItems([
            "3 g√ºn",
            "5 g√ºn",
            "7 g√ºn",
            "10 g√ºn",
            "14 g√ºn",
            "21 g√ºn",
            "1 ay",
            "2 ay",
            "3 ay",
            "H…ôkimin t√∂vsiy…ôsi il…ô"
        ])
        self.duration_combo.setEditable(True)
        form_layout.addRow("M√ºdd…ôt:", self.duration_combo)
        
        # Miqdar
        self.quantity_spin = QSpinBox()
        self.quantity_spin.setRange(1, 1000)
        self.quantity_spin.setValue(1)
        self.quantity_spin.setSuffix(" …ôd…ôd")
        form_layout.addRow("Miqdar:", self.quantity_spin)
        
        # ƒ∞stifad…ô qaydalarƒ±
        self.instructions_text = QTextEdit()
        self.instructions_text.setPlaceholderText("ƒ∞stifad…ô qaydalarƒ±nƒ± qeyd edin...")
        self.instructions_text.setMaximumHeight(60)
        form_layout.addRow("ƒ∞stifad…ô qaydalarƒ±:", self.instructions_text)
        
        med_layout.addWidget(med_form)
        
        # D…ôrman …ôlav…ô et d√ºym…ôsi
        add_med_btn = QPushButton("‚ûï D…ôrman ∆èlav…ô Et")
        add_med_btn.clicked.connect(self.add_medication)
        add_med_btn.setStyleSheet("""
            QPushButton {
                background-color: #28a745;
                font-weight: bold;
                padding: 10px;
            }
            QPushButton:hover {
                background-color: #218838;
            }
        """)
        med_layout.addWidget(add_med_btn)
        med_layout.addStretch()
        
        parent_widget.addWidget(med_frame)
    
    def create_medications_table(self, parent_layout):
        """∆èlav…ô edilmi≈ü d…ôrmanlar c…ôdv…ôli"""
        table_group = QGroupBox("T…ôyin Edilmi≈ü D…ôrmanlar")
        table_layout = QVBoxLayout(table_group)
        
        # C…ôdv…ôl
        self.medications_table = QTableWidget()
        self.medications_table.setColumnCount(6)
        self.medications_table.setHorizontalHeaderLabels([
            "D…ôrman Adƒ±", "Dozaj", "Tezlik", "M√ºdd…ôt", "Miqdar", "Qeydl…ôr"
        ])
        
        # C…ôdv…ôl parametrl…ôri
        self.medications_table.setSelectionBehavior(QAbstractItemView.SelectRows)
        self.medications_table.setAlternatingRowColors(True)
        self.medications_table.setMaximumHeight(200)
        
        # S√ºtun geni≈ülikl…ôri
        header = self.medications_table.horizontalHeader()
        header.setStretchLastSection(True)
        header.setSectionResizeMode(0, QHeaderView.Stretch)  # D…ôrman adƒ±
        
        table_layout.addWidget(self.medications_table)
        
        # C…ôdv…ôl d√ºym…ôl…ôri
        table_buttons = QHBoxLayout()
        
        # D…ôrmanƒ± sil
        self.remove_med_btn = QPushButton("üóëÔ∏è Se√ßilmi≈ü D…ôrmanƒ± Sil")
        self.remove_med_btn.clicked.connect(self.remove_medication)
        self.remove_med_btn.setEnabled(False)
        
        # C…ôdv…ôli t…ômizl…ô
        clear_table_btn = QPushButton("üßπ Hamƒ±sƒ±nƒ± T…ômizl…ô")
        clear_table_btn.clicked.connect(self.clear_medications)
        
        table_buttons.addWidget(self.remove_med_btn)
        table_buttons.addWidget(clear_table_btn)
        table_buttons.addStretch()
        
        table_layout.addLayout(table_buttons)
        
        # C…ôdv…ôl se√ßim hadis…ôsi
        self.medications_table.itemSelectionChanged.connect(self.on_medication_selection_changed)
        
        parent_layout.addWidget(table_group)
    
    def create_action_buttons(self, parent_layout):
        """∆èm…ôliyyat d√ºym…ôl…ôri"""
        button_layout = QHBoxLayout()
        
        # Resepti yadda saxla
        self.save_btn = QPushButton("üíæ Resepti Yadda Saxla")
        self.save_btn.clicked.connect(self.save_prescription)
        self.save_btn.setStyleSheet("""
            QPushButton {
                background-color: #007bff;
                font-weight: bold;
                padding: 12px 24px;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #0056b3;
            }
        """)
        
        # Formu t…ômizl…ô
        clear_btn = QPushButton("üßπ Formu T…ômizl…ô")
        clear_btn.clicked.connect(self.clear_form)
        
        # Pasiyent tarix√ß…ôsi
        self.history_btn = QPushButton("üìú Pasiyent Tarix√ß…ôsi")
        self.history_btn.clicked.connect(self.show_patient_history)
        
        button_layout.addWidget(clear_btn)
        button_layout.addWidget(self.history_btn)
        button_layout.addStretch()
        button_layout.addWidget(self.save_btn)
        
        parent_layout.addLayout(button_layout)
    
    def load_medications_list(self):
        """D…ôrmanlar siyahƒ±sƒ±nƒ± y√ºkl…ôm…ô"""
        try:
            medications = self.db_manager.get_medications_list()
            self.medication_combo.clear()
            
            for med in medications:
                # D…ôrman adƒ± v…ô kateqoriya
                display_text = f"{med['name']} ({med.get('category', '√úmumi')})"
                self.medication_combo.addItem(display_text, med)
                
        except Exception as e:
            print(f"D…ôrmanlar y√ºkl…ôm…ô x…ôtasƒ±: {e}")
    
    def set_patient(self, patient_data):
        """Pasiyent m…ôlumatlarƒ±nƒ± t…ôyin etm…ô"""
        self.current_patient = patient_data
        
        # Header m…ôlumatƒ±nƒ± yenil…ô
        patient_name = f"{patient_data['name']} {patient_data['surname']}"
        patient_info = f"üë§ {patient_name} ‚Ä¢ ID: {patient_data['id']}"
        if patient_data.get('birth_date'):
            patient_info += f" ‚Ä¢ Doƒüum: {patient_data['birth_date']}"
        
        self.patient_info_label.setText(patient_info)
        
        # Formu aktiv et
        self.set_enabled(True)
    
    def set_doctor(self, doctor_data):
        """H…ôkim m…ôlumatlarƒ±nƒ± t…ôyin etm…ô"""
        self.current_doctor = doctor_data
    
    def set_enabled(self, enabled):
        """Widget elementl…ôrini aktiv/deaktiv etm…ô"""
        self.complaint_text.setEnabled(enabled)
        self.diagnosis_text.setEnabled(enabled)
        self.notes_text.setEnabled(enabled)
        self.medication_combo.setEnabled(enabled)
        self.dosage_input.setEnabled(enabled)
        self.frequency_combo.setEnabled(enabled)
        self.duration_combo.setEnabled(enabled)
        self.quantity_spin.setEnabled(enabled)
        self.instructions_text.setEnabled(enabled)
        self.save_btn.setEnabled(enabled)
        self.history_btn.setEnabled(enabled)
    
    def add_medication(self):
        """D…ôrman …ôlav…ô etm…ô"""
        # Validasiya
        medication_name = self.medication_combo.currentText().strip()
        dosage = self.dosage_input.text().strip()
        frequency = self.frequency_combo.currentText().strip()
        duration = self.duration_combo.currentText().strip()
        
        if not medication_name:
            QMessageBox.warning(self, "X…ôta", "D…ôrman adƒ±nƒ± daxil edin!")
            return
        
        if not dosage:
            QMessageBox.warning(self, "X…ôta", "Dozajƒ± daxil edin!")
            return
        
        # D…ôrman obyekti
        medication = {
            'medication_name': medication_name,
            'dosage': dosage,
            'frequency': frequency,
            'duration': duration,
            'quantity': self.quantity_spin.value(),
            'instructions': self.instructions_text.toPlainText().strip()
        }
        
        # Siyahƒ±ya …ôlav…ô et
        self.current_medications.append(medication)
        
        # C…ôdv…ôli yenil…ô
        self.update_medications_table()
        
        # Formu t…ômizl…ô
        self.clear_medication_form()
    
    def update_medications_table(self):
        """D…ôrmanlar c…ôdv…ôlini yenil…ôm…ô"""
        self.medications_table.setRowCount(len(self.current_medications))
        
        for row, med in enumerate(self.current_medications):
            self.medications_table.setItem(row, 0, QTableWidgetItem(med['medication_name']))
            self.medications_table.setItem(row, 1, QTableWidgetItem(med['dosage']))
            self.medications_table.setItem(row, 2, QTableWidgetItem(med['frequency']))
            self.medications_table.setItem(row, 3, QTableWidgetItem(med['duration']))
            self.medications_table.setItem(row, 4, QTableWidgetItem(str(med['quantity'])))
            self.medications_table.setItem(row, 5, QTableWidgetItem(med['instructions']))
        
        # S√ºtun geni≈ülikl…ôrini yenil…ô
        self.medications_table.resizeColumnsToContents()
    
    def clear_medication_form(self):
        """D…ôrman formu t…ômizl…ôm…ô"""
        self.medication_combo.setCurrentIndex(-1)
        self.dosage_input.clear()
        self.frequency_combo.setCurrentIndex(0)
        self.duration_combo.setCurrentIndex(0)
        self.quantity_spin.setValue(1)
        self.instructions_text.clear()
    
    def remove_medication(self):
        """Se√ßilmi≈ü d…ôrmanƒ± silm…ô"""
        selected_rows = self.medications_table.selectionModel().selectedRows()
        
        if not selected_rows:
            return
        
        row = selected_rows[0].row()
        
        # T…ôsdiq
        reply = QMessageBox.question(self, 'T…ôsdiq', 
                                   'Se√ßilmi≈ü d…ôrmanƒ± silm…ôk ist…ôdiyinizd…ôn …ôminsiniz?',
                                   QMessageBox.Yes | QMessageBox.No)
        
        if reply == QMessageBox.Yes:
            # Siyahƒ±dan sil
            del self.current_medications[row]
            
            # C…ôdv…ôli yenil…ô
            self.update_medications_table()
    
    def clear_medications(self):
        """B√ºt√ºn d…ôrmanlarƒ± t…ômizl…ôm…ô"""
        if not self.current_medications:
            return
        
        reply = QMessageBox.question(self, 'T…ôsdiq', 
                                   'B√ºt√ºn d…ôrmanlarƒ± silm…ôk ist…ôdiyinizd…ôn …ôminsiniz?',
                                   QMessageBox.Yes | QMessageBox.No)
        
        if reply == QMessageBox.Yes:
            self.current_medications.clear()
            self.update_medications_table()
    
    def on_medication_selection_changed(self):
        """D…ôrman se√ßimi d…ôyi≈ü…ônd…ô"""
        selected = len(self.medications_table.selectionModel().selectedRows()) > 0
        self.remove_med_btn.setEnabled(selected)
    
    def save_prescription(self):
        """Resepti yadda saxlama"""
        if not self.current_patient or not self.current_doctor:
            QMessageBox.warning(self, "X…ôta", "Pasiyent v…ô ya h…ôkim m…ôlumatƒ± yoxdur!")
            return
        
        if not self.current_medications:
            QMessageBox.warning(self, "X…ôta", "∆èn azƒ± bir d…ôrman …ôlav…ô edin!")
            return
        
        # Resept m…ôlumatlarƒ±
        prescription_data = {
            'doctor_id': self.current_doctor['id'],
            'patient_id': self.current_patient['id'],
            'complaint': self.complaint_text.toPlainText().strip(),
            'diagnosis': self.diagnosis_text.toPlainText().strip(),
            'notes': self.notes_text.toPlainText().strip(),
            'medications': self.current_medications
        }
        
        try:
            # Veril…ônl…ôr bazasƒ±nda saxla
            prescription_id = self.db_manager.create_prescription(prescription_data)
            
            if prescription_id:
                QMessageBox.information(self, "Uƒüur", 
                                      f"Resept uƒüurla yaradƒ±ldƒ±!\nResept ID: {prescription_id}")
                
                # Siqnal g√∂nd…ôr
                self.prescription_saved.emit(prescription_id)
                
                # Formu t…ômizl…ô
                self.clear_form()
            else:
                QMessageBox.critical(self, "X…ôta", "Resept yaradƒ±lmadƒ±!")
                
        except Exception as e:
            QMessageBox.critical(self, "X…ôta", f"Resept saxlama x…ôtasƒ±: {str(e)}")
    
    def clear_form(self):
        """Formu t…ômizl…ôm…ô"""
        self.complaint_text.clear()
        self.diagnosis_text.clear()
        self.notes_text.clear()
        self.current_medications.clear()
        self.update_medications_table()
        self.clear_medication_form()
        self.prescription_date.setDate(QDate.currentDate())
    
    def show_patient_history(self):
        """Pasiyent tarix√ß…ôsini g√∂st…ôrm…ô"""
        if not self.current_patient:
            return
        
        QMessageBox.information(self, "M…ôlumat", 
                               "Pasiyent tarix√ß…ôsi funksiyasƒ± hazƒ±rlanƒ±r...")